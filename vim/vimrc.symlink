" -*- mode: vim; tab-width: 4; indent-tabs-mode: nil; fill-column: 99 -*-
"
" ~sfiera/.vimrc
" Brief: sfiera's vimrc
" Maintainer: Chris Pickel <sfiera@sfzmail.com>
"
" Set up pathogen {{{
execute pathogen#infect()

"if has('python')
"    if v:version >= 704
"        Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
"    elseif (v:version >= 703) && has('patch584')
"        Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
"    endif
"endif

call glaive#Install()
" }}}
" Options {{{
syntax enable
colorscheme sfiera

set nocompatible
set nomodeline
set backspace=2
set showmode
set showcmd
set ruler
set foldmethod=marker
set laststatus=2
set ttyfast
set cursorline
set scrolloff=5
set scrolljump=-25

set nojoinspaces

set numberwidth=8

set hlsearch
set incsearch

set backupskip=/tmp/*,/private/tmp/*
set backupdir=~/.vimswp//
set directory=~/.vimswp//
if has('persistent_undo')
    set undodir=~/.vimswp//
    set undofile
endif

let &colorcolumn="+" . join(range(2,999),",+")

set wildmenu
set wildmode=list:longest,full

set guifont=Source\ Code\ Pro\ ExtraLight:h14
hi! link Label Statement

" Only wait (1/6)s for escape sequences.  Don't time out maps.
set notimeout
set ttimeout
set ttimeoutlen=133

set completeopt=menuone

set mouse=a
" }}}
" Key bindings {{{

" Make Esc enter command-line mode; g[/?] hide incsearch {{{
cnoremap <silent> <Esc> <C-F>

nnoremap <silent> g/ :nohlsearch<CR>
nnoremap <silent> g? :nohlsearch<CR>

nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
" }}}

" Use hjkl; in place of :hjkl {{{
noremap j h
noremap k j
noremap l k
noremap ; l

noremap J _
noremap K }
noremap L {
noremap : g_

nnoremap <C-W>j <C-W>h
nnoremap <C-W>k <C-W>j
nnoremap <C-W>l <C-W>k
nnoremap <C-W>; <C-W>l
nnoremap <C-W>J <C-W>H
nnoremap <C-W>K <C-W>J
nnoremap <C-W>L <C-W>K
nnoremap <C-W>: <C-W>L

noremap h :
noremap H :
noremap ยก :

noremap 0 <NOP>
noremap _ <NOP>
noremap ^ <NOP>
noremap { <NOP>
noremap } <NOP>
noremap $ <NOP>
noremap % <NOP>
" }}}

" Fix some vi inconsistencies {{{
noremap Y y$
vnoremap Y yy
" }}}

" Rebind paired (capitals; adjacent keys) to match {{{
nmap <silent> u <Plug>(RepeatUndo)
nmap <silent> U <Plug>(RepeatRedo)

noremap q @
noremap Q q
noremap m `
noremap M m
noremap s ;
noremap S ,

nnoremap <C-R> <NOP>
noremap  @ <NOP>
noremap , <NOP>
noremap ' J
" }}}

" Make <Space> useful {{{
nmap <silent> <Space> <Plug>(RepeatDot)

nnoremap . <NOP>
" }}}

" g* {{{
map G g

noremap gj 0
noremap gk G
noremap gl gg
noremap g; $

noremap gh %

noremap gs *
noremap gS #

map gw <C-W>
map gW <C-W>
noremap ga <C-A>
noremap gA <C-X>
noremap gv <C-V>
noremap gV <C-V>

noremap * <NOP>
noremap # <NOP>

noremap gg :pclose<CR>:LspHover<CR>
noremap gd :LspDefinition<CR>
noremap gz :LspDocumentDiagnostics<CR>
noremap gx :cclose<CR>
noremap gy :echo SyntaxItem()<CR>

nmap g1 <Plug>BufTabLine.Go(1)
nmap g2 <Plug>BufTabLine.Go(2)
nmap g3 <Plug>BufTabLine.Go(3)
nmap g4 <Plug>BufTabLine.Go(4)
nmap g5 <Plug>BufTabLine.Go(5)
nmap g6 <Plug>BufTabLine.Go(6)
nmap g7 <Plug>BufTabLine.Go(7)
nmap g8 <Plug>BufTabLine.Go(8)
nmap g9 <Plug>BufTabLine.Go(9)
nmap g0 <Plug>BufTabLine.Go(10)
" }}}

" z* {{{
map Z z

nnoremap zj zc
nnoremap zJ zMzX
nnoremap zk zj
nnoremap zK zj
nnoremap zl zk
nnoremap zL zk
nnoremap z; zo
nnoremap z: zRzX

nnoremap zs :split<CR>
nnoremap zS :below split<CR>
nnoremap zd :tab split<CR>
nnoremap zD :tab split<CR>gT

nnoremap zo <NOP>
nnoremap zc <NOP>
nnoremap zM <NOP>
nnoremap zR <NOP>
nnoremap zX <NOP>
" }}}

" Alternate quickly through tabs and files {{{
nnoremap ` :bnext<CR>
nnoremap ~ :bprev<CR>
noremap <Tab> :call altr#forward()<CR>
noremap <S-Tab> :call altr#back()<CR>
nnoremap , :call altr#back()<CR>
nnoremap . :call altr#forward()<CR>
" }}}

" "in file", "a file" motions {{{
onoremap <silent>af :<C-u>normal! ggVG$<CR>
onoremap <silent>if :<C-u>normal! gg0vG$<CR>
vnoremap <silent>af ggoG$
vnoremap <silent>if ggoG$
" }}}
" }}}
" Commands {{{
command! -bang Q :qall<bang>
command! -bang W :wall<bang>
command! -bang WQ :wqall<bang>

command! ShowHideDoc :call ShowHideDoc()

function! ShowHideDoc()
    if has('python')
        let l:python = "python << EOF"
    elseif has('python3')
        let l:python = "python3 << EOF"
    else
        return
    endif
    exec l:python
import ycm.vimsupport
old = None
if ycm.vimsupport.JumpToPreviewWindow():
    old = vim.current.buffer[:]
    ycm.vimsupport.JumpToPreviousWindow()
vim.command("YcmCompleter GetDoc")
new = None
if ycm.vimsupport.JumpToPreviewWindow():
    new = vim.current.buffer[:]
    ycm.vimsupport.JumpToPreviousWindow()
if old == new:
    vim.command("pclose")
EOF
endfunction

function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction
" }}}
" Plugin settings {{{
if filereadable(expand("~/.vim/bundle/altr/autoload/altr.vim"))
    call altr#remove_all()

    call altr#define([
    \   '%/include/%.h',  '%/include/%.hh',  '%/include/%.hpp',
    \   '%/src/%.h',      '%/src/%.hh',      '%/src/%.hpp',
    \   '%/src/%.c',      '%/src/%.cc',      '%/src/%.cpp',      '%/src/%.m',    '%/src/%.mm',
    \   '%/src/%_*.c',    '%/src/%_*.cc',    '%/src/%_*.cpp',    '%/src/%_*.m',  '%/src/%_.mm',
    \   '%/src/%.*.c',    '%/src/%.*.cc',    '%/src/%.*.cpp',    '%/src/%.*.m',  '%/src/%.*.mm',
    \   ])

    call altr#define([
    \   '%.h',    '%.hh',    '%.hpp',
    \   '%.c',    '%.cc',    '%.cpp',    '%.m',    '%.mm',
    \   '%_*.c',  '%_*.cc',  '%_*.cpp',  '%_*.m',  '%_*.mm',
    \   '%.*.c',  '%.*.cc',  '%.*.cpp',  '%.*.m',  '%.*.mm',
    \   ])

    call altr#define('%.go', 'test_%.go', '%_test.go')

    call altr#define('%.py', 'test_%.py', '%_test.py', '%.*.py')

    call altr#define('%.html', '%.css', '%.js')
endif

let g:syntastic_c_compiler_options = '-fblocks'
let g:syntastic_auto_loc_list = 0
let g:syntastic_python_flake8_post_args='--ignore=E501'
let g:buftabline_indicators = 1

if filereadable(expand("~/.vim/bundle/procyon/autoload/procyon.vim"))
    call procyon#InstallCodeFormatter()
endif

augroup autoformat_settings
    autocmd FileType bzl      AutoFormatBuffer  buildifier
    autocmd FileType go       AutoFormatBuffer  gofmt
    autocmd FileType gn       AutoFormatBuffer  gn
    autocmd FileType procyon  AutoFormatBuffer  procyon
augroup END

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('clangd')
    " brew install llvm
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

if executable('css-languageserver')
    " npm install -g vscode-css-languageserver-bin
    au User lsp_setup call lsp#register_server({
        \ 'name': 'css-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
        \ 'whitelist': ['css', 'less', 'sass'],
        \ })
endif

if executable('html-languageserver')
    " npm install -g vscode-html-languageserver-bin
    au User lsp_setup call lsp#register_server({
        \ 'name': 'html-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'html-languageserver --stdio']},
        \ 'whitelist': ['html'],
        \ })
endif

if executable('typescript-language-server')
    " npm install -g typescript-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx'],
        \ })
endif

if executable('kotlin-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'kotlin-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'kotlin-language-server']},
        \ 'whitelist': ['kotlin'],
        \ })
endif

if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
endif

" }}}
" Other files {{{
if glob(expand("~/.vimrc.local")) != ""
    source ~/.vimrc.local
endif
" }}}
