#!/usr/bin/env python

import os
import pipes
import sys
from optparse import OptionParser, OptionGroup


def main():
    parser = OptionParser(
            usage='%prog <mode> <options> <command...>',
            version='%prog 1.0')
    parser.disable_interspersed_args()

    modes = OptionGroup(
            parser, 'Modes', trim("""
                Exactly one mode option must be provided at each invocation of
                stach.  Sockets of the form [[user@]host:]path are recognized,
                where the optional user@host specifies that the socket is on a
                remote machine accessible over ssh.
            """))
    modes.add_option(
            '-a', '--attach', metavar='SOCKET', help=trim("""
                Attach to the specified socket.
            """))
    modes.add_option(
            '-A', '--attach-or-create', metavar='SOCKET', help=trim("""
                Attach to the specified socket, or create it if it does not
                exist, running the specified command.
            """))
    modes.add_option(
            '-c', '--create', metavar='SOCKET', help=trim("""
                Create a new socket and run the specified command.
            """))
    modes.add_option(
            '-n', '--create-and-detach', metavar='SOCKET', help=trim("""
                Create a new socket and run the specified command detached.
            """))
    parser.add_option_group(modes)

    options = OptionGroup(parser, 'Options')
    options.add_option(
            '-e', '--detach-character', metavar='CHAR', default='^\\',
            help=trim("""
                Set the detach character to CHAR.  Defaults to ^\\.
            """))
    options.add_option(
            '-E', '--disable-detach', action='store_const',
            dest='detach_character', const='', help=trim("""
                Disable the detach character.
            """))
    options.add_option(
            '-r', '--redraw-method', choices=['none', 'ctrl_l', 'winch'],
            default='ctrl_l', metavar='METHOD', help=trim("""
                Set the redraw method to METHOD.  The valid methods are:
                none: Don't redraw at all.
                ctrl_l: Send a ^L character to the program.
                winch: Send a WINCH signal to the program.
            """))
    options.add_option(
            '-z', '--disable-suspend', action='store_true', default=False,
            help=trim("""
                Disable processing of the suspend key.
            """))
    parser.add_option_group(options)

    (options, args) = parser.parse_args()

    modes = [
        options.attach,
        options.attach_or_create,
        options.create,
        options.create_and_detach,
    ]
    mode_count = sum([1 for mode in modes if mode is not None])
    if mode_count == 0:
        print 'stach: No mode was specified'
        sys.exit(1)
    elif mode_count > 1:
        print 'stach: More than one mode was specified'
        sys.exit(1)

    ssh_args = None
    dtach_args = ['dtach']
    for option, mode in zip('aAcn', modes):
        if mode is not None:
            s = mode.rsplit(':', 2)
            if len(s) == 2:
                ssh_args = ['ssh', '-t', s[0]]
                dtach_args += ['-' + option,  s[1]]
            else:
                dtach_args += ['-' + option,  mode]
    if options.detach_character:
        dtach_args += ['-e', options.detach_character]
    else:
        dtach_args += ['-E']
    dtach_args += ['-r', options.redraw_method]
    if options.disable_suspend:
        dtach_args += ['-z']
    dtach_args += args

    if ssh_args is None:
        os.execlp('dtach', *dtach_args)
    else:
        ssh_args += map(pipes.quote, dtach_args)
        os.execlp('ssh', *ssh_args)


def trim(docstring):
    """From PEP 257, placed into the public domain."""
    if not docstring:
        return ''
    lines = docstring.expandtabs().splitlines()
    indent = sys.maxint
    for line in lines[1:]:
        stripped = line.lstrip()
        if stripped:
            indent = min(indent, len(line) - len(stripped))
    trimmed = [lines[0].strip()]
    if indent < sys.maxint:
        for line in lines[1:]:
            trimmed.append(line[indent:].rstrip())
    while trimmed and not trimmed[-1]:
        trimmed.pop()
    while trimmed and not trimmed[0]:
        trimmed.pop(0)
    return '\n'.join(trimmed)


if __name__ == '__main__':
    main();
